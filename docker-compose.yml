version: '3.8'
services:
  ws-app:
    container_name: ws_app
    restart: always
    build: .
    volumes:
      - .:/app
    networks:
      - db_network
      - web_network
    depends_on:
      - db
      - redis

  db:
    container_name: ws_db
    restart: always
    image: postgis/postgis:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ws_db-data:/var/lib/postgresql/data
    networks:
      - db_network

  redis:
    container_name: ws_redis
    restart: always
    image: redis:latest
    volumes:
      - ws_redis-data:/data
    networks:
      - db_network

  celery_worker:
    container_name: ws_celery_worker
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: celery -A core worker --loglevel=info
    volumes:
      - .:/app
    networks:
      - db_network
      - web_network
    depends_on:
      - db
      - redis

  celery_beat:
    container_name: ws_celery_beat
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: celery -A core beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    networks:
      - db_network
      - web_network
    depends_on:
      - db
      - redis
      - celery_worker

  flower:
    container_name: ws_flower
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: celery -A core flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    networks:
      - db_network
      - web_network
    depends_on:
      - db
      - redis
      - celery_worker

  nginx:
    container_name: nginx
    restart: always
    image: "nginx:latest"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./security:/etc/nginx/ssl
    networks:
      - web_network
    depends_on:
      - ws-app

volumes:
  ws_db-data:
  ws_redis-data:


networks:
  db_network:
    driver: bridge
  web_network:
    driver: bridge
